// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Company {
  id            String    @id @default(uuid()) @map("_id")
  name          String
  email         String    @unique
  password      String?
  ico           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  jobs          Job[]
  accounts      Account[] // OAuth accounts for company login
  sessions      Session[]
}

model Job {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  company       String
  location      String
  url           String?
  status        String    @default("pending")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  description   String?
  salaryMin     Float?
  salaryMax     Float?
  salaryType    String?   @default("monthly")
  currency      String?   @default("CZK")
  experience    String?
  employmentType String?
  remote        Boolean?  @default(false)
  bonuses       String?
  benefits      String?
  requirements  String?
  responsibilities String?
  skills        String[]
  postedDate    DateTime?
  expiresDate   DateTime?
  source        String    @default("website") // "website" or "scraped"
  creator       Company?  @relation(fields: [creatorId], references: [id])
  creatorId     String?

  @@unique([title, company, location])
}

model Account {
  id                String    @id @default(uuid()) @map("_id")
  userId            String?
  companyId         String?   // Added for company OAuth
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company           Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  userId       String?
  companyId    String?   // Added for company sessions
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
